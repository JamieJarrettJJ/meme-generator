{"version":3,"sources":["components/Meme.js","App.js","reportWebVitals.js","index.js"],"names":["Meme","template","onClick","style","width","src","url","alt","name","id","SwiperCore","use","EffectFlip","Navigation","App","useState","templates","setTemplates","setTemplate","topText","setTopText","bottomText","setBottomText","meme","setMeme","useEffect","fetch","then","x","json","response","data","memes","className","href","type","textAlign","marginTop","effect","grabCursor","keyboard","enabled","flipEffect","rotate","stretch","depth","modifier","slideShadows","navigation","onSubmit","e","a","preventDefault","params","template_id","text0","text1","username","password","obj","Object","entries","map","key","value","join","console","log","placeholder","onChange","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96f8b2e8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Meme = ({ template, onClick }) => {\r\n  return (\r\n    <img\r\n      style={{ width: \"300px\" }}\r\n      key={template.id}\r\n      src={template.url}\r\n      alt={template.name}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport { Meme } from \"./components/Meme\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\n\nimport \"./App.css\";\n\nimport \"swiper/swiper.min.css\";\nimport \"swiper/components/effect-flip/effect-flip.min.css\";\nimport \"swiper/components/navigation/navigation.min.css\";\n\nimport SwiperCore, { EffectFlip, Navigation } from \"swiper/core\";\n\nSwiperCore.use([EffectFlip, Navigation]);\n\nconst objectToQueryParam = (obj) => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n  return \"?\" + params.join(\"&\");\n};\n\nfunction App() {\n  const [templates, setTemplates] = useState([]);\n  const [template, setTemplate] = useState(null);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [meme, setMeme] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then((x) =>\n      x.json().then((response) => setTemplates(response.data.memes))\n    );\n  }, []);\n\n  if (meme) {\n    return (\n      <>\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark \">\n          <a className=\"navbar-brand\" href=\"/\">\n            <b>7 Days, 7 Projects - Meme Generator (Day 3/7)</b>\n          </a>\n\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarNav\"\n            aria-controls=\"navbarNav\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"https://jj1.dev/projects\">\n                  More Projects\n                </a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        <div style={{ textAlign: \"center\" }}>\n          <img\n            style={{ width: 600, marginTop: \"50px\" }}\n            src={meme}\n            alt=\"Custom Meme\"\n          />\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark \">\n        <a className=\"navbar-brand\" href=\"/\">\n          <b>7 Days, 7 Projects - Meme Generator (Day 3/7)</b>\n        </a>\n\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNav\"\n          aria-controls=\"navbarNav\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"https://jj1.dev/projects\">\n                More Projects\n              </a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n      <h1 style={{ marginTop: \"0px\" }}>Click on your favourite meme</h1>\n      <div className=\"memes\" style={{ textAlign: \"center\" }}>\n        <Swiper\n          effect={\"flip\"}\n          grabCursor={true}\n          keyboard={{\n            enabled: true,\n          }}\n          flipEffect={{\n            rotate: 50,\n            stretch: 0,\n            depth: 100,\n            modifier: 1,\n            slideShadows: false,\n          }}\n          navigation={true}\n          className=\"mySwiper\"\n        >\n          {template && (\n            <form\n              onSubmit={async (e) => {\n                e.preventDefault();\n                const params = {\n                  template_id: template.id,\n                  text0: topText,\n                  text1: bottomText,\n                  username: \"Ls2Bvb6fko\",\n                  password: \"R6z2oj4o9Z\",\n                };\n                const response = await fetch(\n                  `https://api.imgflip.com/caption_image${objectToQueryParam(\n                    params\n                  )}`\n                );\n                const json = await response.json();\n                console.log(json);\n                setMeme(json.data.url);\n              }}\n            >\n              <div className=\"textInput\">\n                <Meme template={template} />\n                <input\n                  style={{ marginTop: \"70px\" }}\n                  placeholder=\"top text\"\n                  value={topText}\n                  onChange={(e) => setTopText(e.target.value)}\n                />\n                <input\n                  placeholder=\"bottom text\"\n                  value={bottomText}\n                  onChange={(e) => setBottomText(e.target.value)}\n                />\n                <br></br>\n                <button type=\"submit\">Generate Meme</button>\n              </div>\n            </form>\n          )}\n          {!template &&\n            templates.map((template) => {\n              return (\n                <SwiperSlide>\n                  <Meme\n                    template={template}\n                    onClick={() => {\n                      setTemplate(template);\n                    }}\n                  ></Meme>\n                </SwiperSlide>\n              );\n            })}\n        </Swiper>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}